/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.7).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.nsoroma.trackermonitoring.restcontrollers;

import com.mashape.unirest.http.exceptions.UnirestException;
import com.nsoroma.trackermonitoring.model.trackerstate.TrackerState;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-08-28T15:39:11.130Z")

@Api(value = "tracker", description = "the tracker API")
public interface TrackerApi {

    Logger log = LoggerFactory.getLogger(TrackerApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    Optional<TrackerState> getServerOneTracker(String id);

    TrackerState getServerTwoTracker(String id) throws IOException, UnirestException;

    TrackerState getTrackerByImei(String Imei) throws IOException, UnirestException;

    //rest controller for host/tracker/{id}
    @ApiOperation(value = "returns a tracker with the set ID.", nickname = "trackerID", notes = "fetches and returns a tracker with id as set in the path paramter", response = TrackerState.class, tags={ "developers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success! returns tracker with ID", response = TrackerState.class),
        @ApiResponse(code = 400, message = "bad path parameter") })
    @GetMapping(value = "/api/tracker/{id}", produces = { "application/json" })
    @CrossOrigin
    default ResponseEntity<TrackerState> trackerID(@ApiParam(value = "", required = true) @PathVariable("id") String id) {
        if(getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    if(id.length() == 6) {
                        TrackerState trackerState = getServerTwoTracker(id);
                        if(trackerState.getTrackerId() != null) {
                            return new ResponseEntity<>(trackerState,HttpStatus.OK);
                        } else {
                            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
                        }
                    } else {
                        Optional<TrackerState> trackerState = getServerOneTracker(id);
                        if(trackerState.isPresent()) {
                            return new ResponseEntity<>(trackerState.get(),HttpStatus.OK);
                        } else {
                            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
                        }
                    }
                } catch (IOException | UnirestException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            } else {
                return new ResponseEntity<>(HttpStatus.NOT_ACCEPTABLE);
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TrackerApi interface so no example is generated");
            return new ResponseEntity<>(HttpStatus.NOT_ACCEPTABLE);
        }
    }


    //rest controller for host/tracker/imei/{imei}
    @ApiOperation(value = "returns a tracker with the set IMEI.", nickname = "trackerIMEI", notes = "fetches and returns a tracker with imei as set in the path paramter", response = TrackerState.class, tags={ "developers", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success! returns tracker with Imei", response = TrackerState.class),
            @ApiResponse(code = 400, message = "bad path parameter") })
    @GetMapping(value = "/api/tracker/imei/{imei}", produces = { "application/json" })
    @CrossOrigin
    default ResponseEntity<TrackerState> trackerByImei(@ApiParam(value = "", required = true) @PathVariable("imei") String imei) {
        if(getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getTrackerByImei(imei),HttpStatus.OK);
                } catch (IOException | UnirestException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            } else {
                return new ResponseEntity<>(HttpStatus.NOT_ACCEPTABLE);
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TrackerApi interface so no example is generated");
            return new ResponseEntity<>(HttpStatus.NOT_ACCEPTABLE);
        }
    }

}
