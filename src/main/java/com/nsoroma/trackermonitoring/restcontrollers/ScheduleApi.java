/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.nsoroma.trackermonitoring.restcontrollers;

import com.nsoroma.trackermonitoring.model.schedule.Schedule;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-09-12T18:13:17.843Z")

@Api(value = "schedule", description = "the schedule API")
public interface ScheduleApi {

    Logger log = LoggerFactory.getLogger(ScheduleApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    public Schedule getSchedule(String id);

    public Boolean deleteSchedule(String id);

    public Boolean updateSchedule(String id, Schedule schedule);

    @ApiOperation(value = "deletes a schedule with the set ID.", nickname = "scheduleDelete", notes = "deletes a schedule with id as set in the path paramter", tags={ "developers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success! deleted schedule with ID"),
        @ApiResponse(code = 400, message = "bad path parameter") })
    @DeleteMapping(value = "/api/schedule/{id}")
    @CrossOrigin
    default ResponseEntity<Void> scheduleDelete(@ApiParam(value = "", required = true) @PathVariable("id") String id){
        if(getAcceptHeader().isPresent()) {
            if(deleteSchedule(id)) {
                return new ResponseEntity<>(HttpStatus.OK);
            } else  {
                return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ScheduleApi interface so no example is generated");
            return new ResponseEntity<>(HttpStatus.NOT_ACCEPTABLE);
        }
    }


    @ApiOperation(value = "returns a schedule with the set ID.", nickname = "scheduleId", notes = "fetches and returns a schedule with id as set in the path paramter", response = Schedule.class, tags={ "developers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success! returns schedule with ID", response = Schedule.class),
        @ApiResponse(code = 400, message = "bad path parameter") })
    @GetMapping(value = "/api/schedule/{id}", produces = { "application/json" })
    @CrossOrigin
    default ResponseEntity<Schedule> scheduleId(@ApiParam(value = "", required = true) @PathVariable("id") String id) {
        if(getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                return new ResponseEntity<>(getSchedule(id), HttpStatus.OK);
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ScheduleApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_ACCEPTABLE);
    }


    @ApiOperation(value = "updates a schedule with the set ID.", nickname = "scheduleUpdate", notes = "updates a schedule with id as set in the path paramter", tags={ "developers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success! updated schedule with ID"),
        @ApiResponse(code = 400, message = "bad path parameter") })
    @PutMapping(value = "/api/schedule/{id}", consumes = { "application/json" })
    @CrossOrigin
    default ResponseEntity<Void> scheduleUpdate(@ApiParam(value = "", required = true) @PathVariable("id") String id, @ApiParam(value = "", required = true) @Valid @RequestBody Schedule scheduleUpdate) {
        if(getAcceptHeader().isPresent()) {
            if(updateSchedule(id, scheduleUpdate)) {

                return new ResponseEntity<>(HttpStatus.OK);
            } else {
                return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ScheduleApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_ACCEPTABLE);
    }

}
